# ----------------------------------------------------------------------- deploy settings
# URL of the catalogue service
appserver.url=${ERGO_APPSERVER_URL}

# this name is used for the WAR file name (which also defines the URL path) and the database name for a registry instance
deployName=${ERGO_DEPLOY_NAME}

# database connections parameters
db.url=${ERGO_DB_URL}
db.user=${ERGO_DB_USERNAME}
db.password=${ERGO_DB_PASSWORD}

# repository root directory where tomcat user has read and write access
# the application will automatically append the 'deployName' property
# to this path. So if you have multiple instance of the registry then it will
# place the repository items of different instances in seperate subfolders.
repository.root=${ERGO_REPO_PATH}

# used encoding
encoding = UTF-8
# default language for RIM names and descriptions
lang = en-GB
# maximum amount of objects to return in a query response. (even if client requests more)
db.maxResponse = 20
# default SRS ID used to store and query GEO data.
db.defaultSrsId = 4326
# default SRS name used to store and query GEO data.
db.defaultSrsName = EPSG:4326
# the depth of the relationships in a response.
db.resultDepth=4
# great for performance improvement. usually the elements such as Slot, ExternalIdentifier, Classification, Name, Description, VersionInfo of
# objects such as Associations, Classifications and ExternalIdentifiers are never used (although allowed in the specification).
# Set to 'true', this setting will cause the persistence layer to skip those queries for those elements for the certain objects.
db.simplify.model=true
# if set to 'true', also loads the member objects of a RegistryPackage.
db.loadPackageMembers=true
# if set to 'true', loads child ClassificationNodes of ClassificationSchemes and ClassificationNodes
db.loadNestedClassificationNodes=true
# If disabled, good for performance as the implementation doesn't have to make a seperate query for counting.
# The downside is that the client will not be able to get the total result count to do things like pagination.
# An alternative for the client can be to fetch (requestedObjectSize + 1) to know if there is atleast one more page.
# NOTE: this has to be implemented yet and has to effect at the moment.
db.returnResultCount=true

showExceptionsInSoap=false

# datasource for tomcat DO NOT CHANGE
db.datasource=java:comp/env/jdbc/
# for glassfish
#db.datasource=jdbc/

# database template name which is initialized with postgis data.
# Used while setting up instance database.
db.templatePostgis=${ERGO_DB_POSTGIS}

# ----------------------------------------------------------------------- security config
# enable SOAP encryption and signature. 'security.enabled' property is used at build time.
security.enabled=false
security.keystore.path=
security.keystore.password=
security.keystore.cert.alias=
security.keystore.cert.password=
security.truststore.path=
security.truststore.password=

# ----------------------------------------------------------------------- capabilities config
serviceProvider.name=${ERGO_PROVIDER_NAME}
serviceProvider.site=${ERGO_PROVIDER_SITE}
serviceProvider.contact.name=${ERGO_PROVIDER_CONTACT_NAME}
serviceProvider.contact.position=${ERGO_PROVIDER_CONTACT_POSITION}
serviceProvider.contact.phone=${ERGO_PROVIDER_CONTACT_PHONE}
serviceProvider.contact.address.deliveryPoint=${ERGO_PROVIDER_CONTACT_DELIVERY}
serviceProvider.contact.address.city=${ERGO_PROVIDER_CONTACT_CITY}
serviceProvider.contact.address.administrativeArea=${ERGO_PROVIDER_CONTACT_ADMIN}
serviceProvider.contact.address.postalCode=${ERGO_PROVIDER_CONTACT_POSTAL}
serviceProvider.contact.address.country=${ERGO_PROVIDER_CONTACT_COUNTRY}
serviceProvider.contact.address.electronicMailAddress=${ERGO_PROVIDER_CONTACT_EMAIL}
serviceProvider.contact.hoursOfService=${ERGO_PROVIDER_CONTACT_HOURS}
serviceProvider.contact.contactInstructions=${ERGO_PROVIDER_CONTACT_INSTRUCTIONS}
serviceProvider.role=pointOfContact
