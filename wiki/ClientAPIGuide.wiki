*Dependencies*

The client API ErgoRR-client depends on ErgoRR-commons and ErgoRR-jaxb modules.

The backend API ErgoRR-backend-client uses code from the ErgoRR-web-war. To create the a library from ErgoRR-web-war:

  # Build the ErgoRR-web-war project
  # Run the following ant command from _(ergo-source-dir)/ErgoRR-backend-client_ directory.
{{{
ant build-backend 
}}}

This will create a library in _ErgoRR-backend-client/dist_ called _ErgoRR-backend.jar_ which you will also have to include in your class path together with, ErgoRR-backend-client lib, ErgoRR-commons lib, ErgoRR-jaxb lib and ErgoRR-persistence lib.


*Client initialize*

SOAP interface
{{{
URL serviceURL = new URL("http://urltoservice");
CswClient client = new CswClient(serviceURL);
}}}
Backend Interface
{{{
DbConnectionParams cp = new DbConnectionParams();
cp.setDbUrl("localhost:5432");
cp.setDbName("ergorr");
cp.setDbUser("theUser");
cp.setDbPassword("thePassword");
CswBackendClient client = new CswBackendClient(cp);
}}}

*GetRecords*

Example demostrates querying 30 ExtrinsicObjects with objectType "urn:x-ogc:specification:csw-ebrim:ObjectType:EO:EOProduct"

{{{
URL serviceURL = new URL("http://urltoservice");
CswClient client = new CswClient(serviceURL);
GetRecordsType request = new GetRecordsType();
request.setMaxRecords(BigInteger.valueOf(30));

QueryType query = new QueryType();
request.setAbstractQuery(OFactory.csw.createQuery(query));

// set the query object to return
QName rimQName = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0", "ExtrinsicObject");
query.setElementSetName(new ElementSetNameType());
query.getElementSetName().getTypeNames().add(rimQName);

// set the objects to query
query.getTypeNames().add(rimQName);

QueryConstraintType constraint = new QueryConstraintType();
query.setConstraint(constraint);

FilterType filter = new FilterType();
constraint.setFilter(filter);

BinaryLogicOpType andType = new BinaryLogicOpType();
filter.setLogicOps(OFactory.ogc.createAnd(andType));

BinaryComparisonOpType propEqualType = new BinaryComparisonOpType();
PropertyIsEqualTo propEqual = new PropertyIsEqualTo(propEqualType);
andType.getComparisonOpsOrSpatialOpsOrLogicOps().add(propEqual);

PropertyNameType propName = new PropertyNameType();
propName.getContent().add("/rim:ExtrinsicObject/@objectType");
propEqualType.getExpression().add(OFactory.ogc.createPropertyName(propName));

LiteralType literal = new LiteralType();
literal.getContent().add("urn:x-ogc:specification:csw-ebrim:ObjectType:EO:EOProduct");
propEqualType.getExpression().add(OFactory.ogc.createLiteral(literal));

GetRecordsResponseType response = client.getRecords(request);
}}}

*Transaction*
{{{
URL serviceURL = new URL("http://urltoservice");
CswClient client = new CswClient(serviceURL);
TransactionType t = new TransactionType();
InsertType insert = new InsertType();

// XML file with root XML element rim:RegistryObjectList,
// any rim:RegistryObject, hma:EarthObservation or any of its sub types.
// You can also unmarshal from a stream or leave unmarshalling out
// and construct the content manually with the jaxb binding classes from ErgoRR-jaxb.
File file = new File("/path/to/RegistryObjectList/file.xml");
JAXBElement jaxbEl = (JAXBElement) unmarshaller.unmarshal(file);
insert.getAny().add(jaxbEl);
t.getInsertOrUpdateOrDelete().add(insert);
client.transact(t);
}}}
*GetRecordById*
{{{
URL serviceURL = new URL("http://urltoservice");
CswClient client = new CswClient(serviceURL);
GetRecordByIdType request = new GetRecordByIdType();
request.getId().add("urn:uuid:2eb09d2f-38ea-4fd6-84a6-b78730e40f74");
ElementSetNameType setName = new ElementSetNameType();
setName.setValue(ElementSetType.FULL);
request.setElementSetName(setName);
        
GetRecordByIdResponseType response = client.getRecordById(request);

// print the response
System.out.println(JAXBUtil.getInstance()
    .marshall(OFactory.csw.createGetRecordByIdResponse(response)));
}}}