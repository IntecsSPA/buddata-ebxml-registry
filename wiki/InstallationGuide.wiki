#labels installation
==Requirements==

  * JDK 1.5+  -  Tomcat 5.5.x  -  Postgres 8.3+  -  Postgis 1.3+ 

  * Maven 2.x  -  Ant 1.6+

Make sure that you have following variables set:

CATALINA_HOME : Root directory of tomcat (Only if the provided Ant script is used for deploymeny)

==Installation==

*1. Make sure that the required software is installed properly*

*2. Checkout the source from google code and put it all under one directory.*

The maven projects are:
  * ErgoRR-backend < Contains all the backend logic used by ErgoRR-web and ErgoRR-backend-client
  * ErgoRR-commons < common classes
  * ErgoRR-jaxb < JAXB bindings
  * ErgoRR-persistence < persistence layer
  * ErgoRR-web < web application
  * ErgoRR-client < client API through SOAP interface
  * ErgoRR-backend-client < client API connecting directly to backend



*3. Create a postgre database template*
  * This template will be used by the deployer to generate new instances.
  * Change to the postgres user with the command: 
{{{
sudo su postgres
}}}
  * Create the template database
{{{
createdb template_postgis
}}}
  * Enable plpqsql on the newly created database with the command:
{{{
createlang plpgsql template_postgis
}}}
  * Run the postgis scripts on database "template_postgis" to enable spatial functionality.
{{{
psql -d template_postgis -f /usr/share/postgresql-8.3-postgis/lwpostgis.sql
psql -d template_postgis -f /usr/share/postgresql-8.3-postgis/spatial_ref_sys.sql
}}}

== Deploy ==

*Configure conf/ergorr.properties.*

You can deploy difference instance of Ergo just by changing the 'deployName' property and then running the deployment ant tasks.

The 'deployName' property will become the database name and the deployed WAR application name for the instance.

The idea of Maven and Ant is that Maven is used while development and for building the project. Ant used used for deployment, database setup and data initialization.

*Build the root pom file. It will build all the modules.*
{{{
mvn clean install
}}} 

*Tomcat setup ant task (ONLY ONCE)*
{{{
ant tomcat-setup
}}}

*Restart Tomcat*

* Run these ant tasks in the following order *
{{{
ant db-build
}}}
{{{
ant db-load-model
}}}
{{{
ant deploy
}}}

*Note*: If you are having issues with the Ant tasks, check the properties defined on the top of the build.xml file. One possible problem might be that your Maven repository directory is not in <user_home>/.m2/repository


*Note*: After an instance has been deployed on Tomcat, it sometimes throws an exception because of classpath loading problems. In that case a restart is required. I am looking at how to solve this problem.