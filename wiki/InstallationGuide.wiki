#labels installation
==Requirements==

  * JDK 1.5+  -  Tomcat 5.5.x  -  Postgres 8.3+  -  Postgis 1.3+

Make sure that you have following variables set:

CATALINA_HOME : Root directory of tomcat

ERGO_HOME : Root directory of ERGO project. (Where the ErgoRR folder is in)

==Installation==

*1. Make sure that the required software is installed properly*

*2. Checkout the source from google code and put it all under one directory.*

The maven projects are:
  * ErgoRR-backend < Contains all the backend logic used by ErgoRR-web and ErgoRR-backend-client
  * ErgoRR-client < client API through SOAP interface
  * ErgoRR-backend-client < client API connecting directly to backend
  * ErgoRR-commons < common classes
  * ErgoRR-jaxb < JAXB bindings
  * ErgoRR-persistence < persistence layer
  * ErgoRR-web < web application
  * There is another folder: "ErgoRR-shared" which contains shared libraries.


*3. Create a postgre database template*
  * This template will be used by the deployer to generate new instances.
  * Change to the postgres user with the command: 
{{{
sudo su postgres
}}}
  * Create the template database
{{{
createdb template_postgis
}}}
  * Enable plpqsql on the newly created database with the command:
{{{
createlang plpgsql template_postgis
}}}
  * Run the postgis scripts on database "template_postgis" to enable spatial functionality.
{{{
psql -d template_postgis -f /usr/share/postgresql-8.3-postgis/lwpostgis.sql
psql -d template_postgis -f /usr/share/postgresql-8.3-postgis/spatial_ref_sys.sql
}}}

== Deploy ==

*Configure ErgoRR-commons/src/main/resources/be/kzen/ergorr/commons/common.properties.*

You can deploy difference instance of Ergo just by changing the 'deployName' property and then running the deployment ant tasks.

The 'deployName' property will become the database name and the application name for the instance.

*Go to the Ergo root directory from command line*

*Tomcat setup ant task (ONLY ONCE)*
{{{
ant tomcat-setup
}}}

*Restart Tomcat*

* Run these ant tasks in the following order. If you just want to re-deploy the application then you just need to run the 'all-build' and 'deploy' tasks*
{{{
ant all-build
}}}
{{{
ant db-build
}}}
{{{
ant deploy
}}}
{{{
ant db-load-model
}}}



*Note*: After an instance has been deployed on Tomcat, it sometimes throws an exception because of classpath loading problems. In that case a restart is required. I am looking at how to solve this problem.